// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: movemessage.proto

#ifndef PROTOBUF_movemessage_2eproto__INCLUDED
#define PROTOBUF_movemessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace aiconnector {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_movemessage_2eproto();
void protobuf_AssignDesc_movemessage_2eproto();
void protobuf_ShutdownFile_movemessage_2eproto();

class MoveMessage;
class MoveMessage_Move;

enum MoveMessage_RequestType {
  MoveMessage_RequestType_GET_MOVE = 0,
  MoveMessage_RequestType_SET_MOVE = 1,
  MoveMessage_RequestType_MoveMessage_RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MoveMessage_RequestType_MoveMessage_RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MoveMessage_RequestType_IsValid(int value);
const MoveMessage_RequestType MoveMessage_RequestType_RequestType_MIN = MoveMessage_RequestType_GET_MOVE;
const MoveMessage_RequestType MoveMessage_RequestType_RequestType_MAX = MoveMessage_RequestType_SET_MOVE;
const int MoveMessage_RequestType_RequestType_ARRAYSIZE = MoveMessage_RequestType_RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MoveMessage_RequestType_descriptor();
inline const ::std::string& MoveMessage_RequestType_Name(MoveMessage_RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MoveMessage_RequestType_descriptor(), value);
}
inline bool MoveMessage_RequestType_Parse(
    const ::std::string& name, MoveMessage_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MoveMessage_RequestType>(
    MoveMessage_RequestType_descriptor(), name, value);
}
enum MoveMessage_ResponseType {
  MoveMessage_ResponseType_MOVE = 0,
  MoveMessage_ResponseType_OK = 1,
  MoveMessage_ResponseType_ERROR = 2,
  MoveMessage_ResponseType_MoveMessage_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MoveMessage_ResponseType_MoveMessage_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MoveMessage_ResponseType_IsValid(int value);
const MoveMessage_ResponseType MoveMessage_ResponseType_ResponseType_MIN = MoveMessage_ResponseType_MOVE;
const MoveMessage_ResponseType MoveMessage_ResponseType_ResponseType_MAX = MoveMessage_ResponseType_ERROR;
const int MoveMessage_ResponseType_ResponseType_ARRAYSIZE = MoveMessage_ResponseType_ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MoveMessage_ResponseType_descriptor();
inline const ::std::string& MoveMessage_ResponseType_Name(MoveMessage_ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MoveMessage_ResponseType_descriptor(), value);
}
inline bool MoveMessage_ResponseType_Parse(
    const ::std::string& name, MoveMessage_ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MoveMessage_ResponseType>(
    MoveMessage_ResponseType_descriptor(), name, value);
}
// ===================================================================

class MoveMessage_Move : public ::google::protobuf::Message {
 public:
  MoveMessage_Move();
  virtual ~MoveMessage_Move();

  MoveMessage_Move(const MoveMessage_Move& from);

  inline MoveMessage_Move& operator=(const MoveMessage_Move& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveMessage_Move& default_instance();

  void Swap(MoveMessage_Move* other);

  // implements Message ----------------------------------------------

  inline MoveMessage_Move* New() const { return New(NULL); }

  MoveMessage_Move* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoveMessage_Move& from);
  void MergeFrom(const MoveMessage_Move& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MoveMessage_Move* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:aiconnector.MoveMessage.Move)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_movemessage_2eproto();
  friend void protobuf_AssignDesc_movemessage_2eproto();
  friend void protobuf_ShutdownFile_movemessage_2eproto();

  void InitAsDefaultInstance();
  static MoveMessage_Move* default_instance_;
};
// -------------------------------------------------------------------

class MoveMessage : public ::google::protobuf::Message {
 public:
  MoveMessage();
  virtual ~MoveMessage();

  MoveMessage(const MoveMessage& from);

  inline MoveMessage& operator=(const MoveMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveMessage& default_instance();

  void Swap(MoveMessage* other);

  // implements Message ----------------------------------------------

  inline MoveMessage* New() const { return New(NULL); }

  MoveMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoveMessage& from);
  void MergeFrom(const MoveMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MoveMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MoveMessage_Move Move;

  typedef MoveMessage_RequestType RequestType;
  static const RequestType GET_MOVE = MoveMessage_RequestType_GET_MOVE;
  static const RequestType SET_MOVE = MoveMessage_RequestType_SET_MOVE;
  static inline bool RequestType_IsValid(int value) {
    return MoveMessage_RequestType_IsValid(value);
  }
  static const RequestType RequestType_MIN =
    MoveMessage_RequestType_RequestType_MIN;
  static const RequestType RequestType_MAX =
    MoveMessage_RequestType_RequestType_MAX;
  static const int RequestType_ARRAYSIZE =
    MoveMessage_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestType_descriptor() {
    return MoveMessage_RequestType_descriptor();
  }
  static inline const ::std::string& RequestType_Name(RequestType value) {
    return MoveMessage_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const ::std::string& name,
      RequestType* value) {
    return MoveMessage_RequestType_Parse(name, value);
  }

  typedef MoveMessage_ResponseType ResponseType;
  static const ResponseType MOVE = MoveMessage_ResponseType_MOVE;
  static const ResponseType OK = MoveMessage_ResponseType_OK;
  static const ResponseType ERROR = MoveMessage_ResponseType_ERROR;
  static inline bool ResponseType_IsValid(int value) {
    return MoveMessage_ResponseType_IsValid(value);
  }
  static const ResponseType ResponseType_MIN =
    MoveMessage_ResponseType_ResponseType_MIN;
  static const ResponseType ResponseType_MAX =
    MoveMessage_ResponseType_ResponseType_MAX;
  static const int ResponseType_ARRAYSIZE =
    MoveMessage_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResponseType_descriptor() {
    return MoveMessage_ResponseType_descriptor();
  }
  static inline const ::std::string& ResponseType_Name(ResponseType value) {
    return MoveMessage_ResponseType_Name(value);
  }
  static inline bool ResponseType_Parse(const ::std::string& name,
      ResponseType* value) {
    return MoveMessage_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .aiconnector.MoveMessage.RequestType requesttype = 1;
  void clear_requesttype();
  static const int kRequesttypeFieldNumber = 1;
  ::aiconnector::MoveMessage_RequestType requesttype() const;
  void set_requesttype(::aiconnector::MoveMessage_RequestType value);

  // optional .aiconnector.MoveMessage.ResponseType responsetype = 2;
  void clear_responsetype();
  static const int kResponsetypeFieldNumber = 2;
  ::aiconnector::MoveMessage_ResponseType responsetype() const;
  void set_responsetype(::aiconnector::MoveMessage_ResponseType value);

  // optional .aiconnector.MoveMessage.Move move = 3;
  bool has_move() const;
  void clear_move();
  static const int kMoveFieldNumber = 3;
  const ::aiconnector::MoveMessage_Move& move() const;
  ::aiconnector::MoveMessage_Move* mutable_move();
  ::aiconnector::MoveMessage_Move* release_move();
  void set_allocated_move(::aiconnector::MoveMessage_Move* move);

  // @@protoc_insertion_point(class_scope:aiconnector.MoveMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int requesttype_;
  int responsetype_;
  ::aiconnector::MoveMessage_Move* move_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_movemessage_2eproto();
  friend void protobuf_AssignDesc_movemessage_2eproto();
  friend void protobuf_ShutdownFile_movemessage_2eproto();

  void InitAsDefaultInstance();
  static MoveMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MoveMessage_Move

// optional string name = 1;
inline void MoveMessage_Move::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoveMessage_Move::name() const {
  // @@protoc_insertion_point(field_get:aiconnector.MoveMessage.Move.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoveMessage_Move::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aiconnector.MoveMessage.Move.name)
}
inline void MoveMessage_Move::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aiconnector.MoveMessage.Move.name)
}
inline void MoveMessage_Move::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aiconnector.MoveMessage.Move.name)
}
inline ::std::string* MoveMessage_Move::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aiconnector.MoveMessage.Move.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoveMessage_Move::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoveMessage_Move::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aiconnector.MoveMessage.Move.name)
}

// -------------------------------------------------------------------

// MoveMessage

// optional .aiconnector.MoveMessage.RequestType requesttype = 1;
inline void MoveMessage::clear_requesttype() {
  requesttype_ = 0;
}
inline ::aiconnector::MoveMessage_RequestType MoveMessage::requesttype() const {
  // @@protoc_insertion_point(field_get:aiconnector.MoveMessage.requesttype)
  return static_cast< ::aiconnector::MoveMessage_RequestType >(requesttype_);
}
inline void MoveMessage::set_requesttype(::aiconnector::MoveMessage_RequestType value) {
  
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:aiconnector.MoveMessage.requesttype)
}

// optional .aiconnector.MoveMessage.ResponseType responsetype = 2;
inline void MoveMessage::clear_responsetype() {
  responsetype_ = 0;
}
inline ::aiconnector::MoveMessage_ResponseType MoveMessage::responsetype() const {
  // @@protoc_insertion_point(field_get:aiconnector.MoveMessage.responsetype)
  return static_cast< ::aiconnector::MoveMessage_ResponseType >(responsetype_);
}
inline void MoveMessage::set_responsetype(::aiconnector::MoveMessage_ResponseType value) {
  
  responsetype_ = value;
  // @@protoc_insertion_point(field_set:aiconnector.MoveMessage.responsetype)
}

// optional .aiconnector.MoveMessage.Move move = 3;
inline bool MoveMessage::has_move() const {
  return !_is_default_instance_ && move_ != NULL;
}
inline void MoveMessage::clear_move() {
  if (GetArenaNoVirtual() == NULL && move_ != NULL) delete move_;
  move_ = NULL;
}
inline const ::aiconnector::MoveMessage_Move& MoveMessage::move() const {
  // @@protoc_insertion_point(field_get:aiconnector.MoveMessage.move)
  return move_ != NULL ? *move_ : *default_instance_->move_;
}
inline ::aiconnector::MoveMessage_Move* MoveMessage::mutable_move() {
  
  if (move_ == NULL) {
    move_ = new ::aiconnector::MoveMessage_Move;
  }
  // @@protoc_insertion_point(field_mutable:aiconnector.MoveMessage.move)
  return move_;
}
inline ::aiconnector::MoveMessage_Move* MoveMessage::release_move() {
  
  ::aiconnector::MoveMessage_Move* temp = move_;
  move_ = NULL;
  return temp;
}
inline void MoveMessage::set_allocated_move(::aiconnector::MoveMessage_Move* move) {
  delete move_;
  move_ = move;
  if (move) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aiconnector.MoveMessage.move)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace aiconnector

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aiconnector::MoveMessage_RequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aiconnector::MoveMessage_RequestType>() {
  return ::aiconnector::MoveMessage_RequestType_descriptor();
}
template <> struct is_proto_enum< ::aiconnector::MoveMessage_ResponseType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aiconnector::MoveMessage_ResponseType>() {
  return ::aiconnector::MoveMessage_ResponseType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_movemessage_2eproto__INCLUDED
