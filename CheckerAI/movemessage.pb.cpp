// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: movemessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "movemessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace aiconnector {

namespace {

const ::google::protobuf::Descriptor* MoveMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveMessage_Piece_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveMessage_Piece_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveMessage_Move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveMessage_Move_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MoveMessage_RequestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MoveMessage_ResponseType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_movemessage_2eproto() {
  protobuf_AddDesc_movemessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "movemessage.proto");
  GOOGLE_CHECK(file != NULL);
  MoveMessage_descriptor_ = file->message_type(0);
  static const int MoveMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMessage, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMessage, responsetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMessage, move_),
  };
  MoveMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MoveMessage_descriptor_,
      MoveMessage::default_instance_,
      MoveMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(MoveMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMessage, _is_default_instance_));
  MoveMessage_Piece_descriptor_ = MoveMessage_descriptor_->nested_type(0);
  static const int MoveMessage_Piece_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMessage_Piece, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMessage_Piece, location_),
  };
  MoveMessage_Piece_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MoveMessage_Piece_descriptor_,
      MoveMessage_Piece::default_instance_,
      MoveMessage_Piece_offsets_,
      -1,
      -1,
      -1,
      sizeof(MoveMessage_Piece),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMessage_Piece, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMessage_Piece, _is_default_instance_));
  MoveMessage_Move_descriptor_ = MoveMessage_descriptor_->nested_type(1);
  static const int MoveMessage_Move_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMessage_Move, newpiece_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMessage_Move, removedpieces_),
  };
  MoveMessage_Move_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MoveMessage_Move_descriptor_,
      MoveMessage_Move::default_instance_,
      MoveMessage_Move_offsets_,
      -1,
      -1,
      -1,
      sizeof(MoveMessage_Move),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMessage_Move, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveMessage_Move, _is_default_instance_));
  MoveMessage_RequestType_descriptor_ = MoveMessage_descriptor_->enum_type(0);
  MoveMessage_ResponseType_descriptor_ = MoveMessage_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_movemessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MoveMessage_descriptor_, &MoveMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MoveMessage_Piece_descriptor_, &MoveMessage_Piece::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MoveMessage_Move_descriptor_, &MoveMessage_Move::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_movemessage_2eproto() {
  delete MoveMessage::default_instance_;
  delete MoveMessage_reflection_;
  delete MoveMessage_Piece::default_instance_;
  delete MoveMessage_Piece_reflection_;
  delete MoveMessage_Move::default_instance_;
  delete MoveMessage_Move_reflection_;
}

void protobuf_AddDesc_movemessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021movemessage.proto\022\013aiconnector\"\244\003\n\013Mov"
    "eMessage\0229\n\013requesttype\030\001 \001(\0162$.aiconnec"
    "tor.MoveMessage.RequestType\022;\n\014responset"
    "ype\030\002 \001(\0162%.aiconnector.MoveMessage.Resp"
    "onseType\022+\n\004move\030\003 \001(\0132\035.aiconnector.Mov"
    "eMessage.Move\032\'\n\005Piece\022\014\n\004type\030\001 \001(\t\022\020\n\010"
    "location\030\002 \001(\005\032o\n\004Move\0220\n\010newpiece\030\001 \001(\013"
    "2\036.aiconnector.MoveMessage.Piece\0225\n\rremo"
    "vedpieces\030\002 \003(\0132\036.aiconnector.MoveMessag"
    "e.Piece\")\n\013RequestType\022\014\n\010GET_MOVE\020\000\022\014\n\010"
    "SET_MOVE\020\001\"+\n\014ResponseType\022\010\n\004MOVE\020\000\022\006\n\002"
    "OK\020\001\022\t\n\005ERROR\020\002b\006proto3", 463);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "movemessage.proto", &protobuf_RegisterTypes);
  MoveMessage::default_instance_ = new MoveMessage();
  MoveMessage_Piece::default_instance_ = new MoveMessage_Piece();
  MoveMessage_Move::default_instance_ = new MoveMessage_Move();
  MoveMessage::default_instance_->InitAsDefaultInstance();
  MoveMessage_Piece::default_instance_->InitAsDefaultInstance();
  MoveMessage_Move::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_movemessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_movemessage_2eproto {
  StaticDescriptorInitializer_movemessage_2eproto() {
    protobuf_AddDesc_movemessage_2eproto();
  }
} static_descriptor_initializer_movemessage_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* MoveMessage_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveMessage_RequestType_descriptor_;
}
bool MoveMessage_RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MoveMessage_RequestType MoveMessage::GET_MOVE;
const MoveMessage_RequestType MoveMessage::SET_MOVE;
const MoveMessage_RequestType MoveMessage::RequestType_MIN;
const MoveMessage_RequestType MoveMessage::RequestType_MAX;
const int MoveMessage::RequestType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MoveMessage_ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveMessage_ResponseType_descriptor_;
}
bool MoveMessage_ResponseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MoveMessage_ResponseType MoveMessage::MOVE;
const MoveMessage_ResponseType MoveMessage::OK;
const MoveMessage_ResponseType MoveMessage::ERROR;
const MoveMessage_ResponseType MoveMessage::ResponseType_MIN;
const MoveMessage_ResponseType MoveMessage::ResponseType_MAX;
const int MoveMessage::ResponseType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveMessage_Piece::kTypeFieldNumber;
const int MoveMessage_Piece::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveMessage_Piece::MoveMessage_Piece()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aiconnector.MoveMessage.Piece)
}

void MoveMessage_Piece::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MoveMessage_Piece::MoveMessage_Piece(const MoveMessage_Piece& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aiconnector.MoveMessage.Piece)
}

void MoveMessage_Piece::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = 0;
}

MoveMessage_Piece::~MoveMessage_Piece() {
  // @@protoc_insertion_point(destructor:aiconnector.MoveMessage.Piece)
  SharedDtor();
}

void MoveMessage_Piece::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MoveMessage_Piece::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveMessage_Piece::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveMessage_Piece_descriptor_;
}

const MoveMessage_Piece& MoveMessage_Piece::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_movemessage_2eproto();
  return *default_instance_;
}

MoveMessage_Piece* MoveMessage_Piece::default_instance_ = NULL;

MoveMessage_Piece* MoveMessage_Piece::New(::google::protobuf::Arena* arena) const {
  MoveMessage_Piece* n = new MoveMessage_Piece;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MoveMessage_Piece::Clear() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = 0;
}

bool MoveMessage_Piece::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aiconnector.MoveMessage.Piece)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aiconnector.MoveMessage.Piece.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_location;
        break;
      }

      // optional int32 location = 2;
      case 2: {
        if (tag == 16) {
         parse_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aiconnector.MoveMessage.Piece)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aiconnector.MoveMessage.Piece)
  return false;
#undef DO_
}

void MoveMessage_Piece::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aiconnector.MoveMessage.Piece)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aiconnector.MoveMessage.Piece.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional int32 location = 2;
  if (this->location() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->location(), output);
  }

  // @@protoc_insertion_point(serialize_end:aiconnector.MoveMessage.Piece)
}

::google::protobuf::uint8* MoveMessage_Piece::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aiconnector.MoveMessage.Piece)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aiconnector.MoveMessage.Piece.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional int32 location = 2;
  if (this->location() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->location(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:aiconnector.MoveMessage.Piece)
  return target;
}

int MoveMessage_Piece::ByteSize() const {
  int total_size = 0;

  // optional string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional int32 location = 2;
  if (this->location() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->location());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveMessage_Piece::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MoveMessage_Piece* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MoveMessage_Piece>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveMessage_Piece::MergeFrom(const MoveMessage_Piece& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.location() != 0) {
    set_location(from.location());
  }
}

void MoveMessage_Piece::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveMessage_Piece::CopyFrom(const MoveMessage_Piece& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveMessage_Piece::IsInitialized() const {

  return true;
}

void MoveMessage_Piece::Swap(MoveMessage_Piece* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveMessage_Piece::InternalSwap(MoveMessage_Piece* other) {
  type_.Swap(&other->type_);
  std::swap(location_, other->location_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MoveMessage_Piece::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveMessage_Piece_descriptor_;
  metadata.reflection = MoveMessage_Piece_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveMessage_Move::kNewpieceFieldNumber;
const int MoveMessage_Move::kRemovedpiecesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveMessage_Move::MoveMessage_Move()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aiconnector.MoveMessage.Move)
}

void MoveMessage_Move::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  newpiece_ = const_cast< ::aiconnector::MoveMessage_Piece*>(&::aiconnector::MoveMessage_Piece::default_instance());
}

MoveMessage_Move::MoveMessage_Move(const MoveMessage_Move& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aiconnector.MoveMessage.Move)
}

void MoveMessage_Move::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  newpiece_ = NULL;
}

MoveMessage_Move::~MoveMessage_Move() {
  // @@protoc_insertion_point(destructor:aiconnector.MoveMessage.Move)
  SharedDtor();
}

void MoveMessage_Move::SharedDtor() {
  if (this != default_instance_) {
    delete newpiece_;
  }
}

void MoveMessage_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveMessage_Move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveMessage_Move_descriptor_;
}

const MoveMessage_Move& MoveMessage_Move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_movemessage_2eproto();
  return *default_instance_;
}

MoveMessage_Move* MoveMessage_Move::default_instance_ = NULL;

MoveMessage_Move* MoveMessage_Move::New(::google::protobuf::Arena* arena) const {
  MoveMessage_Move* n = new MoveMessage_Move;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MoveMessage_Move::Clear() {
  if (GetArenaNoVirtual() == NULL && newpiece_ != NULL) delete newpiece_;
  newpiece_ = NULL;
  removedpieces_.Clear();
}

bool MoveMessage_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aiconnector.MoveMessage.Move)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .aiconnector.MoveMessage.Piece newpiece = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newpiece()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_removedpieces;
        break;
      }

      // repeated .aiconnector.MoveMessage.Piece removedpieces = 2;
      case 2: {
        if (tag == 18) {
         parse_removedpieces:
          DO_(input->IncrementRecursionDepth());
         parse_loop_removedpieces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_removedpieces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_removedpieces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aiconnector.MoveMessage.Move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aiconnector.MoveMessage.Move)
  return false;
#undef DO_
}

void MoveMessage_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aiconnector.MoveMessage.Move)
  // optional .aiconnector.MoveMessage.Piece newpiece = 1;
  if (this->has_newpiece()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->newpiece_, output);
  }

  // repeated .aiconnector.MoveMessage.Piece removedpieces = 2;
  for (unsigned int i = 0, n = this->removedpieces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->removedpieces(i), output);
  }

  // @@protoc_insertion_point(serialize_end:aiconnector.MoveMessage.Move)
}

::google::protobuf::uint8* MoveMessage_Move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aiconnector.MoveMessage.Move)
  // optional .aiconnector.MoveMessage.Piece newpiece = 1;
  if (this->has_newpiece()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->newpiece_, target);
  }

  // repeated .aiconnector.MoveMessage.Piece removedpieces = 2;
  for (unsigned int i = 0, n = this->removedpieces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->removedpieces(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:aiconnector.MoveMessage.Move)
  return target;
}

int MoveMessage_Move::ByteSize() const {
  int total_size = 0;

  // optional .aiconnector.MoveMessage.Piece newpiece = 1;
  if (this->has_newpiece()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->newpiece_);
  }

  // repeated .aiconnector.MoveMessage.Piece removedpieces = 2;
  total_size += 1 * this->removedpieces_size();
  for (int i = 0; i < this->removedpieces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->removedpieces(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveMessage_Move::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MoveMessage_Move* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MoveMessage_Move>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveMessage_Move::MergeFrom(const MoveMessage_Move& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  removedpieces_.MergeFrom(from.removedpieces_);
  if (from.has_newpiece()) {
    mutable_newpiece()->::aiconnector::MoveMessage_Piece::MergeFrom(from.newpiece());
  }
}

void MoveMessage_Move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveMessage_Move::CopyFrom(const MoveMessage_Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveMessage_Move::IsInitialized() const {

  return true;
}

void MoveMessage_Move::Swap(MoveMessage_Move* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveMessage_Move::InternalSwap(MoveMessage_Move* other) {
  std::swap(newpiece_, other->newpiece_);
  removedpieces_.UnsafeArenaSwap(&other->removedpieces_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MoveMessage_Move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveMessage_Move_descriptor_;
  metadata.reflection = MoveMessage_Move_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveMessage::kRequesttypeFieldNumber;
const int MoveMessage::kResponsetypeFieldNumber;
const int MoveMessage::kMoveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveMessage::MoveMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aiconnector.MoveMessage)
}

void MoveMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  move_ = const_cast< ::aiconnector::MoveMessage_Move*>(&::aiconnector::MoveMessage_Move::default_instance());
}

MoveMessage::MoveMessage(const MoveMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aiconnector.MoveMessage)
}

void MoveMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  requesttype_ = 0;
  responsetype_ = 0;
  move_ = NULL;
}

MoveMessage::~MoveMessage() {
  // @@protoc_insertion_point(destructor:aiconnector.MoveMessage)
  SharedDtor();
}

void MoveMessage::SharedDtor() {
  if (this != default_instance_) {
    delete move_;
  }
}

void MoveMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveMessage_descriptor_;
}

const MoveMessage& MoveMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_movemessage_2eproto();
  return *default_instance_;
}

MoveMessage* MoveMessage::default_instance_ = NULL;

MoveMessage* MoveMessage::New(::google::protobuf::Arena* arena) const {
  MoveMessage* n = new MoveMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MoveMessage::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MoveMessage*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(requesttype_, responsetype_);
  if (GetArenaNoVirtual() == NULL && move_ != NULL) delete move_;
  move_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MoveMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aiconnector.MoveMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .aiconnector.MoveMessage.RequestType requesttype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_requesttype(static_cast< ::aiconnector::MoveMessage_RequestType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_responsetype;
        break;
      }

      // optional .aiconnector.MoveMessage.ResponseType responsetype = 2;
      case 2: {
        if (tag == 16) {
         parse_responsetype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_responsetype(static_cast< ::aiconnector::MoveMessage_ResponseType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_move;
        break;
      }

      // optional .aiconnector.MoveMessage.Move move = 3;
      case 3: {
        if (tag == 26) {
         parse_move:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_move()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aiconnector.MoveMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aiconnector.MoveMessage)
  return false;
#undef DO_
}

void MoveMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aiconnector.MoveMessage)
  // optional .aiconnector.MoveMessage.RequestType requesttype = 1;
  if (this->requesttype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->requesttype(), output);
  }

  // optional .aiconnector.MoveMessage.ResponseType responsetype = 2;
  if (this->responsetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->responsetype(), output);
  }

  // optional .aiconnector.MoveMessage.Move move = 3;
  if (this->has_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->move_, output);
  }

  // @@protoc_insertion_point(serialize_end:aiconnector.MoveMessage)
}

::google::protobuf::uint8* MoveMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aiconnector.MoveMessage)
  // optional .aiconnector.MoveMessage.RequestType requesttype = 1;
  if (this->requesttype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->requesttype(), target);
  }

  // optional .aiconnector.MoveMessage.ResponseType responsetype = 2;
  if (this->responsetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->responsetype(), target);
  }

  // optional .aiconnector.MoveMessage.Move move = 3;
  if (this->has_move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->move_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:aiconnector.MoveMessage)
  return target;
}

int MoveMessage::ByteSize() const {
  int total_size = 0;

  // optional .aiconnector.MoveMessage.RequestType requesttype = 1;
  if (this->requesttype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->requesttype());
  }

  // optional .aiconnector.MoveMessage.ResponseType responsetype = 2;
  if (this->responsetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->responsetype());
  }

  // optional .aiconnector.MoveMessage.Move move = 3;
  if (this->has_move()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->move_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MoveMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MoveMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveMessage::MergeFrom(const MoveMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.requesttype() != 0) {
    set_requesttype(from.requesttype());
  }
  if (from.responsetype() != 0) {
    set_responsetype(from.responsetype());
  }
  if (from.has_move()) {
    mutable_move()->::aiconnector::MoveMessage_Move::MergeFrom(from.move());
  }
}

void MoveMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveMessage::CopyFrom(const MoveMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveMessage::IsInitialized() const {

  return true;
}

void MoveMessage::Swap(MoveMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveMessage::InternalSwap(MoveMessage* other) {
  std::swap(requesttype_, other->requesttype_);
  std::swap(responsetype_, other->responsetype_);
  std::swap(move_, other->move_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MoveMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveMessage_descriptor_;
  metadata.reflection = MoveMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MoveMessage_Piece

// optional string type = 1;
void MoveMessage_Piece::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MoveMessage_Piece::type() const {
  // @@protoc_insertion_point(field_get:aiconnector.MoveMessage.Piece.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MoveMessage_Piece::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aiconnector.MoveMessage.Piece.type)
}
 void MoveMessage_Piece::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aiconnector.MoveMessage.Piece.type)
}
 void MoveMessage_Piece::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aiconnector.MoveMessage.Piece.type)
}
 ::std::string* MoveMessage_Piece::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:aiconnector.MoveMessage.Piece.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MoveMessage_Piece::release_type() {
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MoveMessage_Piece::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:aiconnector.MoveMessage.Piece.type)
}

// optional int32 location = 2;
void MoveMessage_Piece::clear_location() {
  location_ = 0;
}
 ::google::protobuf::int32 MoveMessage_Piece::location() const {
  // @@protoc_insertion_point(field_get:aiconnector.MoveMessage.Piece.location)
  return location_;
}
 void MoveMessage_Piece::set_location(::google::protobuf::int32 value) {
  
  location_ = value;
  // @@protoc_insertion_point(field_set:aiconnector.MoveMessage.Piece.location)
}

// -------------------------------------------------------------------

// MoveMessage_Move

// optional .aiconnector.MoveMessage.Piece newpiece = 1;
bool MoveMessage_Move::has_newpiece() const {
  return !_is_default_instance_ && newpiece_ != NULL;
}
void MoveMessage_Move::clear_newpiece() {
  if (GetArenaNoVirtual() == NULL && newpiece_ != NULL) delete newpiece_;
  newpiece_ = NULL;
}
const ::aiconnector::MoveMessage_Piece& MoveMessage_Move::newpiece() const {
  // @@protoc_insertion_point(field_get:aiconnector.MoveMessage.Move.newpiece)
  return newpiece_ != NULL ? *newpiece_ : *default_instance_->newpiece_;
}
::aiconnector::MoveMessage_Piece* MoveMessage_Move::mutable_newpiece() {
  
  if (newpiece_ == NULL) {
    newpiece_ = new ::aiconnector::MoveMessage_Piece;
  }
  // @@protoc_insertion_point(field_mutable:aiconnector.MoveMessage.Move.newpiece)
  return newpiece_;
}
::aiconnector::MoveMessage_Piece* MoveMessage_Move::release_newpiece() {
  
  ::aiconnector::MoveMessage_Piece* temp = newpiece_;
  newpiece_ = NULL;
  return temp;
}
void MoveMessage_Move::set_allocated_newpiece(::aiconnector::MoveMessage_Piece* newpiece) {
  delete newpiece_;
  newpiece_ = newpiece;
  if (newpiece) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aiconnector.MoveMessage.Move.newpiece)
}

// repeated .aiconnector.MoveMessage.Piece removedpieces = 2;
int MoveMessage_Move::removedpieces_size() const {
  return removedpieces_.size();
}
void MoveMessage_Move::clear_removedpieces() {
  removedpieces_.Clear();
}
const ::aiconnector::MoveMessage_Piece& MoveMessage_Move::removedpieces(int index) const {
  // @@protoc_insertion_point(field_get:aiconnector.MoveMessage.Move.removedpieces)
  return removedpieces_.Get(index);
}
::aiconnector::MoveMessage_Piece* MoveMessage_Move::mutable_removedpieces(int index) {
  // @@protoc_insertion_point(field_mutable:aiconnector.MoveMessage.Move.removedpieces)
  return removedpieces_.Mutable(index);
}
::aiconnector::MoveMessage_Piece* MoveMessage_Move::add_removedpieces() {
  // @@protoc_insertion_point(field_add:aiconnector.MoveMessage.Move.removedpieces)
  return removedpieces_.Add();
}
::google::protobuf::RepeatedPtrField< ::aiconnector::MoveMessage_Piece >*
MoveMessage_Move::mutable_removedpieces() {
  // @@protoc_insertion_point(field_mutable_list:aiconnector.MoveMessage.Move.removedpieces)
  return &removedpieces_;
}
const ::google::protobuf::RepeatedPtrField< ::aiconnector::MoveMessage_Piece >&
MoveMessage_Move::removedpieces() const {
  // @@protoc_insertion_point(field_list:aiconnector.MoveMessage.Move.removedpieces)
  return removedpieces_;
}

// -------------------------------------------------------------------

// MoveMessage

// optional .aiconnector.MoveMessage.RequestType requesttype = 1;
void MoveMessage::clear_requesttype() {
  requesttype_ = 0;
}
 ::aiconnector::MoveMessage_RequestType MoveMessage::requesttype() const {
  // @@protoc_insertion_point(field_get:aiconnector.MoveMessage.requesttype)
  return static_cast< ::aiconnector::MoveMessage_RequestType >(requesttype_);
}
 void MoveMessage::set_requesttype(::aiconnector::MoveMessage_RequestType value) {
  
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:aiconnector.MoveMessage.requesttype)
}

// optional .aiconnector.MoveMessage.ResponseType responsetype = 2;
void MoveMessage::clear_responsetype() {
  responsetype_ = 0;
}
 ::aiconnector::MoveMessage_ResponseType MoveMessage::responsetype() const {
  // @@protoc_insertion_point(field_get:aiconnector.MoveMessage.responsetype)
  return static_cast< ::aiconnector::MoveMessage_ResponseType >(responsetype_);
}
 void MoveMessage::set_responsetype(::aiconnector::MoveMessage_ResponseType value) {
  
  responsetype_ = value;
  // @@protoc_insertion_point(field_set:aiconnector.MoveMessage.responsetype)
}

// optional .aiconnector.MoveMessage.Move move = 3;
bool MoveMessage::has_move() const {
  return !_is_default_instance_ && move_ != NULL;
}
void MoveMessage::clear_move() {
  if (GetArenaNoVirtual() == NULL && move_ != NULL) delete move_;
  move_ = NULL;
}
const ::aiconnector::MoveMessage_Move& MoveMessage::move() const {
  // @@protoc_insertion_point(field_get:aiconnector.MoveMessage.move)
  return move_ != NULL ? *move_ : *default_instance_->move_;
}
::aiconnector::MoveMessage_Move* MoveMessage::mutable_move() {
  
  if (move_ == NULL) {
    move_ = new ::aiconnector::MoveMessage_Move;
  }
  // @@protoc_insertion_point(field_mutable:aiconnector.MoveMessage.move)
  return move_;
}
::aiconnector::MoveMessage_Move* MoveMessage::release_move() {
  
  ::aiconnector::MoveMessage_Move* temp = move_;
  move_ = NULL;
  return temp;
}
void MoveMessage::set_allocated_move(::aiconnector::MoveMessage_Move* move) {
  delete move_;
  move_ = move;
  if (move) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aiconnector.MoveMessage.move)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace aiconnector

// @@protoc_insertion_point(global_scope)
